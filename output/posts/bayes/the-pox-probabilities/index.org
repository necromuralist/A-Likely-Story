#+BEGIN_COMMENT
.. title: The Pox Probabilities
.. slug: the-pox-probabilities
.. date: 2019-06-05 17:17:38 UTC-07:00
.. tags: bayes,notes
.. category: Bayes Theorem
.. link: 
.. description: An example of Bayes' Theorem using pox.
.. type: text
.. status: 
.. updated: 

#+END_COMMENT
#+OPTIONS: ^:{}
#+OPTIONS: H:5
#+TOC: headlines 2
#+BEGIN_SRC ipython :session pox :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC
* Beginning
** Imports
*** Python
#+begin_src ipython :session pox :results none
from argparse import Namespace
#+end_src
*** PyPi
#+begin_src ipython :session pox :results none
from expects import (
    equal,
    expect,
)
#+end_src
* Middle
** The Classes
#+begin_src plantuml :file ../../files/posts/bayes/the-pox-probabilities/pox_uml.png
Diagnosis o-- Disease
Diagnosis : Disease disease_1
Diagnosis : Disease disease_2
Diagnosis : float odds_ratio
Diagnosis : dict posterior_probabilities

Disease : float prior_probability
Disease : float likelihood
Disease : float marginal_likelihood
Disease : float posterior_probability
Disease : string name
#+end_src

#+RESULTS:
[[file:../../files/posts/bayes/the-pox-probabilities/pox_uml.png]]

[[file:pox_uml.png]]

** The Disease
#+BEGIN_SRC ipython :session pox :results none
class Disease:
    """something to hold disease probabilities
    
    Args:
     prior_probabilty: probability of having this disease
     likelihood: likelihood of symptoms given this disease
     marginal_likelihood: probability of having the symptoms
    """
    def __init__(self, prior_probability: float, likelihood: float,
                 marginal_likelihood: float) -> None:
        self.prior_probability = prior_probability
        self.likelihood = likelihood
        self.marginal_likelihood = marginal_likelihood
        return
#+END_SRC
** Probabilities
*** Spots
    The spots are the symptom, and the probability is the number of people in the population with spots divided by the total population.

#+begin_src ipython :session pox :results none
Spots = Namespace(
    probability=0.081
)
#+end_src
*** SmallPox
#+begin_src ipython :session pox :results none
SmallpoxProbabilities = Namespace(
    probability=0.001,
    probability_of_spots_given_smallpox=0.9,
    probability_of_spots=Spots.probability,
)
#+end_src
* End
** Testing
*** Disease Object

#+BEGIN_SRC ipython :session pox :results none
# Given a disease object
expected = Namespace(
    prior=SmallpoxProbabilities.probability,
    likelihood=SmallpoxProbabilities.probability_of_spots_given_smallpox,
    marginal_likelihood = SmallpoxProbabilities.probability_of_spots,
)
disease = Disease(expected.prior, expected.likelihood, expected.marginal_likelihood)
# When its prior probability is checked
prior = disease.prior_probability
# And its likelihood is checked
likelihood = disease.likelihood
# And its marginal likelihood is checked
marginal_likelihood = disease.marginal_likelihood

# Then it has the expected values
expect(prior).to(equal(expected.prior))
expect(likelihood).to(equal(expected.likelihood))
expect(marginal_likelihood).to(equal(expected.marginal_likelihood))
#+END_SRC
